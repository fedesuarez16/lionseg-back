// Generate invoices for all active clients
app.post('/api/generar-facturas', async (req, res) => {
  try {
    // Filtrar solo clientes activos
    const clientes = await Cliente.find({ state: 'activo' });

    const enlacesFacturas = [];

    for (const cliente of clientes) {
      const doc = new PDFDocument();
      const fileName = `FAC_${Date.now()}.pdf`;

      const dirFacturas = 'public/facturas';
      if (!fs.existsSync(dirFacturas)) {
        const dirPublic = 'public';
        if (!fs.existsSync(dirPublic)) {
          fs.mkdirSync(dirPublic);
        }
        fs.mkdirSync(dirFacturas);
      }

      doc.pipe(fs.createWriteStream(`public/facturas/${fileName}`));

      // Add logo
      const logoPath = "./logo.png"; // Replace with the path to your logo
      if (fs.existsSync(logoPath)) {
        doc.image(logoPath, 50, 45, { width: 100 });
      }

       
      // Add invoice metadata
      const invoiceDate = new Date();
      const expirationDate = new Date();
      expirationDate.setDate(invoiceDate.getDate() + 7); // 7 days from the invoice date
      const invoiceNumber = `INV-${Date.now()}`;

      doc.fontSize(10)
        .text(`Fecha de la Factura: ${invoiceDate.toLocaleDateString()}`, 200, 65, { align: 'right' })
        .text(`Fecha de Vencimiento: ${expirationDate.toLocaleDateString()}`, 200, 80, { align: 'right' })
        .text(`Número de Factura: ${invoiceNumber}`, 200, 95, { align: 'right' });

      doc.moveDown(2);

      // Add client details
      doc.text(`Facturado a:`, 50, 160)
        .text(`${cliente.name}`, 50, 175)
        .text(`${cliente.address || 'Dirección no proporcionada'}`, 50, 190)
        .text(`${cliente.city || ''}, ${cliente.state || ''}, ${cliente.zip || ''}`, 50, 205)
        .text(`${cliente.country || 'País no proporcionado'}`, 50, 220);

      doc.moveDown(2);

      // Add service details
      const services = cliente.services.length > 0 ? cliente.services : [];

      // Add table headers with dark gray color
      const tableTop = 280;
      const itemCodeX = 50;
      const descriptionX = 50;
      const unitPriceX = 450;

      doc.rect(itemCodeX, tableTop - 5, unitPriceX - itemCodeX + 100, 20)
        .fill('#696969')
        .stroke();

      doc.fontSize(10).fillColor('white')
        .text('Descripción', descriptionX, tableTop, { bold: true })
        .text('Total', unitPriceX, tableTop, { align: 'right', bold: true });

      // Add table rows with alternating gray colors
      services.forEach((item, index) => {
        const y = tableTop + 25 + (index * 25);
        const fillColor = index % 2 === 0 ? '#cccccc' : '#e6e6e6';

        doc.rect(itemCodeX, y - 5, unitPriceX - itemCodeX + 100, 25)
          .fill(fillColor)
          .stroke();

        doc.fillColor('black')
          .text(item.producto || 'N/A', descriptionX, y)
          .text(`$${(item.price || 0).toFixed(2)} ARS`, unitPriceX, y, { align: 'right' });
      });

      const subTotal = services.reduce((sum, item) => sum + (item.price || 0), 0);
      let recargo = 0;
      if (new Date() > expirationDate) {
        recargo = subTotal * 0.1;
      }
      const total = subTotal + recargo;

      // Add totals with added space
      const totalStartY = tableTop + 25 * services.length + 40;
      doc.text(`Sub Total: $${subTotal.toFixed(2)} ARS`, unitPriceX, totalStartY, { align: 'right' })
        .text(`Recargo por falta de pago a término: $${recargo.toFixed(2)} ARS`, unitPriceX, totalStartY + 35, { align: 'right' })
        .moveDown(8) // Increased space between recargo and total
        .text(`Total: $${total.toFixed(2)} ARS`, unitPriceX, totalStartY + 80, { align: 'right', bold: true });

      // Add payment methods
      doc.moveDown(2);
      const paymentTableTop = doc.y;
      const paymentDescriptionX = 50;
      const paymentAmountX = 300;

      doc.fontSize(10)
        .fillColor('black')
        .text('Métodos de Pago:', paymentDescriptionX, paymentTableTop)
        .text('Banco Patagonia:', paymentDescriptionX, paymentTableTop + 15)
        .text('Alias: PAJARO.SABADO.LARGO', paymentDescriptionX, paymentTableTop + 30)
        .text('CBU: 0340040108409895361003', paymentDescriptionX, paymentTableTop + 45)
        .text('Cuenta: CA $ 040-409895361-000', paymentDescriptionX, paymentTableTop + 60)
        .text('CUIL: 20224964162', paymentDescriptionX, paymentTableTop + 75);

      doc.fontSize(10)
        .fillColor('black')
        .text('Mercado Pago:', paymentAmountX, paymentTableTop + 15)
        .text('Alias: lionseg.mp', paymentAmountX, paymentTableTop + 30)
        .text('CVU: 0000003100041927153583', paymentAmountX, paymentTableTop + 45)
        .text('Número: 1125071506 (Jorge Luis Castillo)', paymentAmountX, paymentTableTop + 60);

      // Add custom message at the bottom
      const customMessageY = doc.y + 20;
      doc.text('Puedes transferir a la cuenta de tu preferencia y debes enviar el comprobante al siguiente número +54 9 11 3507-2413', 50, customMessageY);

      doc.end();

      const invoice = {
        fileName,
        state: 'pending',
        registrationDate: invoiceDate,
        expirationDate,
        invoiceNumber,
        total,
      };

      cliente.invoiceLinks.push(invoice);
      await cliente.save();

      console.log(`Factura generada para ${cliente.name}`);

      const facturaLink = `https://localhost:3000/facturas/${fileName}`; // Cambiar a HTTPS si es necesario
      enlacesFacturas.push(facturaLink);

      const htmlContent = `
      <div style="font-family: Arial, sans-serif; height:auto; max-width: 600px; margin: auto; padding: 20px; border: 1px solid #ddd;">
        <div style="text-align: center;">
          <img src="https://storage.googleapis.com/lionseg/logolionseg.png" alt="Logo" style="width: 100px;">
        </div>
        <h2 style="text-align: center; color: #333;">Factura Generada</h2>
        <p style="color: #666;">Estimado ${cliente.name},</p>
        <p style="color: #666;">Te informamos que se ha generado una nueva factura. Puedes descargarla desde el enlace adjunto:</p>
        <p style="color: #666;">Total a pagar: <strong>$${total.toFixed(2)} ARS</strong></p>
        <p style="color: #666;">Métodos de pago:</p>
        <ul style="color: #666;">
          <li>Transferencia Bancaria: CBU 0340040108409895361003</li>
          <li>MercadoPago: Alias lionseg.mp</li>
          <li>Efectivo</li>
        </ul>
        <p style="color: #666;">Por favor, realiza el pago antes del <strong>${expirationDate.toLocaleDateString()}</strong> para evitar recargos .</p>
          <p style="color: #666;">Enviar comprobante de pago al siguiente numero +54 9 11 3507-2413. El pago no sera procesado hasta recibir el comprobante</p>

        <div style="text-align: center; margin-top: 20px;">
          <img src="https://storage.googleapis.com/lionseg/QR_43096512.pdf.png" alt="QR Code" style="width: 150px;">
        </div>
        <p style="color: #666;">Gracias por confiar en nuestros servicios.</p>
        <div style="border-top: 1px solid #ddd; margin-top: 20px; padding-top: 20px; text-align: center;">
          <p style="color: #666;">Sistema desarrollado por <a href="https://www.flipwebco.com" style="color: #1a73e8; text-decoration: none;">Flipwebco</a></p>
        </div>
      </div>
    `;
    

      await transporter.sendMail({
        from: 'coflipweb@gmail.com',
        to: cliente.email,
        subject: 'Factura',
        text: 'Se adjunta la factura.',
        html:htmlContent,
        attachments: [{ filename: fileName, path: `./public/facturas/${fileName}` }],
      });
    }

    console.log('Facturas generadas con éxito');
    res.status(200).json({ message: 'Facturas generadas con éxito', enlacesFacturas });
  } catch (error) {
    console.error('Error al generar las facturas:', error);
    res.status(500).json({ error });
  }
});
 